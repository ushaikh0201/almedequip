{"version":3,"sources":["webpack:///./common/services/content-mng.service.ts","webpack:///./node_modules/rxjs-compat/_esm5/add/observable/of.js","webpack:///./src/app/pages/content-mng/content-routing.module.ts","webpack:///./src/app/pages/content-mng/content.component.ts","webpack:///./src/app/pages/content-mng/content.module.ts","webpack:///./src/app/pages/content-mng/products/product.component.html","webpack:///./src/app/pages/content-mng/products/product.component.scss","webpack:///./src/app/pages/content-mng/products/product.component.ts","webpack:///./src/app/validators/control-messages.component.ts","webpack:///./src/app/validators/validation.module.ts","webpack:///./src/app/validators/validation.service.ts"],"names":[],"mappings":"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","file":"content-mng-content-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers, RequestOptions, Response } from '@angular/http';\n\ndeclare var jQuery: any;\ndeclare var $: any;\n\n@Injectable()\nexport class ContentMngService {\n\n  constructor(private http: Http) { }\n  insertProductContent(product){\n    console.log(product);\n    return this.http.post('/content-mng/product/insert-product', product).map((response: Response) => response.json());\n  }\n}\n\n","import { Observable, of as staticOf } from 'rxjs';\nObservable.of = staticOf;\n//# sourceMappingURL=of.js.map","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ProductComponent } from './products/product.component';\nimport { ContentComponent } from './content.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: ContentComponent,\n  children: [\n    {\n      path: 'products',\n      component: ProductComponent,\n    }\n  ],\n}];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes),\n  ],\n  exports: [\n    RouterModule,\n  ],\n})\nexport class ContentRoutingModule {\n\n}\n\nexport const routedComponents = [\n  ContentComponent,\n  ProductComponent\n];\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ngx-content-mng',\n  template: `\n    <router-outlet></router-outlet>\n  `,\n})\nexport class ContentComponent {\n}\n","import { NgModule } from '@angular/core';\n\nimport { ThemeModule } from '../../@theme/theme.module';\nimport { ContentRoutingModule, routedComponents } from './content-routing.module';\nimport { ValidationModule } from '../../validators/validation.module';\nimport { ValidationService } from '../../validators/validation.service';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ContentMngService } from \"../../../../common/services/content-mng.service\";\n@NgModule({\n  imports: [\n    FormsModule, \n    ReactiveFormsModule,\n    ThemeModule,\n    ContentRoutingModule,\n    ValidationModule\n  ],\n  providers:[ValidationService, ContentMngService],\n  declarations: [\n    ...routedComponents,\n  ],\n})\nexport class ContentModule { }\n","module.exports = \"<nb-card>\\n    <nb-card-header>Block form</nb-card-header>\\n    <nb-card-body *ngIf=\\\"productForm\\\">\\n        <form [formGroup]=\\\"productForm\\\" (ngSubmit)=\\\"formProductSubmit()\\\" novalidate>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"form-group col-md-6\\\">\\n                    <label>Product Name</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\" (blur)=\\\"validateOnBlur('name',$event)\\\"/>\\n                    <control-messages [control]=\\\"productForm.controls.name\\\"></control-messages>\\n                </div>\\n                <div class=\\\"form-group col-md-6\\\">\\n                    <label>Product Code</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"code\\\" class=\\\"form-control\\\" (blur)=\\\"validateOnBlur('code',$event)\\\"/>\\n                    <control-messages [control]=\\\"productForm.controls.code\\\"></control-messages>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"form-group col-md-3\\\">\\n                    <label>Price</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"price\\\" class=\\\"form-control\\\" (blur)=\\\"validateOnBlur('price',$event)\\\"/>\\n                    <control-messages [control]=\\\"productForm.controls.price\\\"></control-messages>\\n                </div>\\n                <div class=\\\"form-group col-md-3\\\">\\n                    <label>Status</label>\\n                    <select formControlName=\\\"status\\\" class=\\\"form-control\\\" (blur)=\\\"validateOnBlur('status',$event)\\\">\\n                        <option value=\\\"1\\\">Active</option>\\n                        <option value=\\\"2\\\">InActive</option>\\n                    </select>\\n                    <control-messages [control]=\\\"productForm.controls.status\\\"></control-messages>\\n                </div>\\n                <div class=\\\"form-group col-md-6\\\">\\n                    <label>Category</label>\\n                    <select formControlName=\\\"category\\\" class=\\\"form-control\\\" (blur)=\\\"validateOnBlur('category',$event)\\\">\\n                        <option value=\\\"1\\\">Latest</option>\\n                        <option value=\\\"2\\\">Featured</option>\\n                    </select>\\n                    <control-messages [control]=\\\"productForm.controls.category\\\"></control-messages>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"form-group col-md-6\\\">\\n                    <label>Leading Content</label>\\n                    <textarea formControlName=\\\"main_content\\\"  cols=\\\"30\\\" rows=\\\"8\\\" class=\\\"form-control\\\" (blur)=\\\"validateOnBlur('main_content',$event)\\\"></textarea>\\n                    <control-messages [control]=\\\"productForm.controls.main_content\\\"></control-messages>\\n                    <div class=\\\"validation-checkboxes row\\\">\\n                        <nb-checkbox status=\\\"success\\\" class=\\\"col-sm-4\\\" formControlName=\\\"type\\\">New</nb-checkbox>\\n                        <nb-checkbox status=\\\"warning\\\" class=\\\"col-sm-4\\\" formControlName=\\\"type\\\">Offer</nb-checkbox>\\n                        <nb-checkbox status=\\\"danger\\\" class=\\\"col-sm-4\\\" formControlName=\\\"type\\\">Publish</nb-checkbox>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group col-md-6\\\">\\n                    <label>Description</label>\\n                    <textarea formControlName=\\\"description\\\"  cols=\\\"30\\\" rows=\\\"10\\\" class=\\\"form-control\\\" (blur)=\\\"validateOnBlur('description',$event)\\\"></textarea>\\n                    <control-messages [control]=\\\"productForm.controls.description\\\"></control-messages>\\n                </div>\\n            </div>\\n            <!-- https://stackblitz.com/edit/angular-5e2qjd?file=src%2Fapp%2Fapp.component.html -->\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\" formArrayName=\\\"tech_spec\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-success btn-block\\\" (click)=\\\"addSpecField()\\\"><i class=\\\"fa fa-plus\\\"></i> Technical Specification</button>\\n                    <div class=\\\"input-group\\\"  *ngFor=\\\"let specification of productForm.controls.tech_spec.controls; let i=index\\\" [formGroupName]=\\\"i\\\">\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"specification\\\">\\n                        <span class=\\\"input-group-append\\\">\\n                            <button type=\\\"button\\\" class=\\\"btn btn-danger input-group-text\\\" (click)=\\\"removeSpecField()\\\">\\n                            <i class=\\\"fa fa-minus text-default\\\"></i>\\n                            </button>\\n                        </span>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-6\\\" formArrayName=\\\"usage\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-success btn-block\\\" (click)=\\\"addUsageField()\\\"><i class=\\\"fa fa-plus\\\"></i> Usage of Product</button>\\n                    <div class=\\\"input-group\\\"  *ngFor=\\\"let language of productForm.controls.usage.controls; let i=index\\\" [formGroupName]=\\\"i\\\">\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"usagelist\\\">\\n                        <span class=\\\"input-group-append\\\">\\n                            <button type=\\\"button\\\" class=\\\"btn btn-danger input-group-text\\\" (click)=\\\"removeUsageField()\\\">\\n                            <i class=\\\"fa fa-minus text-default\\\"></i>\\n                            </button>\\n                        </span>\\n                    </div>\\n                </div>\\n            </div>\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n        </form>\\n    </nb-card-body>\\n</nb-card>\"","module.exports = \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host .full-width {\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1;\\n          flex: 1;\\n  min-width: 220px; }\\n.nb-theme-default :host nb-checkbox {\\n  margin-bottom: 1rem; }\\n[dir=ltr] .nb-theme-default :host .form-inline > * {\\n  margin: 0 1.5rem 1.5rem 0; }\\n[dir=rtl] .nb-theme-default :host .form-inline > * {\\n  margin: 0 0 1.5rem 1.5rem; }\\n.nb-theme-default :host nb-card.inline-form-card nb-card-body {\\n  padding-bottom: 0; }\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host .full-width {\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1;\\n          flex: 1;\\n  min-width: 220px; }\\n.nb-theme-cosmic :host nb-checkbox {\\n  margin-bottom: 1rem; }\\n[dir=ltr] .nb-theme-cosmic :host .form-inline > * {\\n  margin: 0 1.5rem 1.5rem 0; }\\n[dir=rtl] .nb-theme-cosmic :host .form-inline > * {\\n  margin: 0 0 1.5rem 1.5rem; }\\n.nb-theme-cosmic :host nb-card.inline-form-card nb-card-body {\\n  padding-bottom: 0; }\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host .full-width {\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1;\\n          flex: 1;\\n  min-width: 220px; }\\n.nb-theme-corporate :host nb-checkbox {\\n  margin-bottom: 1rem; }\\n[dir=ltr] .nb-theme-corporate :host .form-inline > * {\\n  margin: 0 1.5rem 1.5rem 0; }\\n[dir=rtl] .nb-theme-corporate :host .form-inline > * {\\n  margin: 0 0 1.5rem 1.5rem; }\\n.nb-theme-corporate :host nb-card.inline-form-card nb-card-body {\\n  padding-bottom: 0; }\\n.validation-checkboxes {\\n  margin-top: 15px;\\n  text-align: center; }\\n\"","import { Component, Renderer } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl, FormArray } from '@angular/forms';\nimport { ValidationService } from '../../../validators/validation.service';\nimport { ContentMngService } from \"../../../../../common/services/content-mng.service\";\n\n@Component({\n  selector: 'ngx-product',\n  styleUrls: ['./product.component.scss'],\n  templateUrl: './product.component.html',\n})\nexport class ProductComponent {\n  productForm: FormGroup;\n  submitted = false;\n\n  constructor(private formBuilder: FormBuilder, private _renderer: Renderer, private contentMngService: ContentMngService) { }\n\n  ngOnInit() {\n    this.productForm = this.formBuilder.group({\n        \"name\": new FormControl(null, [ValidationService.requiredValidator]),\n        \"code\": new FormControl(null, [ValidationService.requiredValidator]),\n        \"price\": new FormControl(null, [ValidationService.requiredValidator]),\n        \"status\": new FormControl(1, [ValidationService.requiredValidator]),\n        \"category\": new FormControl(1, [ValidationService.requiredValidator]),\n        \"type\": new FormControl(false, [ValidationService.requiredValidator]),\n        \"main_content\": new FormControl(null, [ValidationService.requiredValidator]),\n        \"description\": new FormControl(null, [ValidationService.requiredValidator]),\n        \"tech_spec\": this.formBuilder.array([\n          this.initTechSpec()\n        ]),\n        \"usage\": this.formBuilder.array([\n          this.initUsage()\n        ])\n    });\n  }\n\n  initTechSpec() {\n    return this.formBuilder.group({\n        specification: new FormControl(null)\n    });\n  }\n  \n  initUsage() {\n    return this.formBuilder.group({\n        usagelist: new FormControl(null)\n    });\n  }\n\n  addSpecField() {\n    const control = <FormArray>this.productForm.controls['tech_spec'];\n    control.push(this.initTechSpec());\n  }\n\n  addUsageField() {\n    const control = <FormArray>this.productForm.controls['usage'];\n    control.push(this.initUsage());\n  }\n\n  removeSpecField(i: number) {\n      const control = <FormArray>this.productForm.controls['tech_spec'];\n      control.removeAt(i);\n  }\n\n  removeUsageField(i: number) {\n      const control = <FormArray>this.productForm.controls['usage'];\n      control.removeAt(i);\n  }\n\n  validateOnBlur(field: string | Array<string>, ev:Event){\n    if(this.productForm.get(field).invalid && (this.productForm.get(field).dirty || this.productForm.get(field).touched)){\n      this._renderer.setElementClass(ev.target, \"form-control-danger\", true);\n    }else{\n      this._renderer.setElementClass(ev.target, \"form-control-danger\", false);\n      this._renderer.setElementClass(ev.target, \"form-control-success\", true);\n    }\n  }\n\n  formProductSubmit(){\n    if(this.productForm.valid){\n      // console.log(this.productForm.value);\n      this.contentMngService.insertProductContent(this.productForm.value).subscribe(res=>{\n        console.log(res);\n      });\n    }else{\n      this.validateAllFields(this.productForm);\n    }\n  }\n\n  validateAllFields(formGroup: FormGroup) {\n\t\tObject.keys(formGroup.controls).forEach(field => {\n\t\t\tconst control = formGroup.get(field);\n\t\t\tif (control instanceof FormControl) {\n\t\t\t\tcontrol.markAsTouched({ onlySelf: true });\n\t\t\t} else if (control instanceof FormGroup) {\n\t\t\t\tthis.validateAllFields(control);\n\t\t\t}\n\t\t});\n\t}\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ValidationService } from './validation.service';\n\n@Component({\n  selector: 'control-messages',\n  template: `<div *ngIf=\"errorMessage !== null\" class=\"text-danger\">{{errorMessage}}</div>`\n})\nexport class ControlMessagesComponent {\n  @Input() control: FormControl;\n  \n  constructor() { }\n\n  get errorMessage() {\n    for (let propertyName in this.control.errors) {\n      if (this.control.errors.hasOwnProperty(propertyName) && this.control.touched) {\n        return ValidationService.getValidatorErrorMessage(propertyName, this.control.errors[propertyName]);\n      }\n    }\n    \n    return null;\n  }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ControlMessagesComponent } from './control-messages.component';\nimport { ValidationService } from './validation.service';\n\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        ControlMessagesComponent\n    ],\n    providers:[ValidationService],\n    exports:[\n        // AlertComponent\n        ControlMessagesComponent\n    ]\n})\nexport class ValidationModule { }\n","import { AbstractControl, FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/map';\n\nexport class ValidationService {\n    static getValidatorErrorMessage(validatorName: string, validatorValue?: any) {\n        let config = {\n            'required': `This field is required!`,\n            'invalidCreditCard': 'Is invalid credit card number',\n            'invalidEmailAddress': 'Please enter valid email address.',\n            'invalidPassword': 'Password must be between 6 and 20 characters!',\n            'minlength': `You need to enter at least ${validatorValue.requiredLength} characters.`,\n            'notMatchPassword': 'Password confirmation does not match password!',\n            'mustChecked': 'This must be checked',\n            'notValidBondValue': 'Number of bond must be less than or equal to available bond!',\n            'maxLength': `You can only enter ${validatorValue.requiredLength} characters.`,\n            'dateInvalid': 'Invalid date!',\n            'endDateLessThanStartDate': 'End Date should be greater than start date!',\n            'notLessThanOrEqualtoZeroValue': 'This field should not be less than or equal to zero',\n            'notAvailableToSold': 'Not available to sold',\n            'amountLessThanRequiredAmount': 'Amount must be less than required amount',\n            'invalidMobileNumber': 'Invalid mobile number!',\n        };\n\n        return config[validatorName];\n    }\n\n    static requiredValidator(control) {\n        if (control.value == null || control.value == '' || control.value == 0) {\n            return { 'required': true };\n        } else {\n            return null;\n        }\n    }\n\n    /* static requiredIfValidator(control: AbstractControl){\n        const formGroup = control.parent;\n        if(formGroup){\n            const prevControl = formGroup.get('')   \n        }\n    } */\n\n    static creditCardValidator(control) {\n        // Visa, MasterCard, American Express, Diners Club, Discover, JCB\n        if (control.value.match(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/)) {\n            return null;\n        } else {\n            return { 'invalidCreditCard': true };\n        }\n    }\n\n    static emailValidator(control) {\n        // RFC 2822 compliant regex\n        if (control.value == null || control.value == '') {\n            return null;\n        }\n        if (control.value.match(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/)) {\n            return null;\n        } else {\n            return { 'invalidEmailAddress': true };\n        }\n    }\n\n    static passwordValidator(control) {\n        // {6,100}           - Assert password is between 6 and 100 characters\n        // (?=.*[0-9])       - Assert a string has at least one number\n        if (!control.value) {\n            return null;\n        }\n        if (control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,20}$/)) {\n            return null;\n        } else {\n            return { 'invalidPassword': true };\n        }\n    }\n\n    static confirmPasswordValidator(AC: AbstractControl) {\n        const formGroup = AC.parent;\n        if (formGroup) {\n            const passwordControl = formGroup.get('password'); // to get value in input tag\n            const confirmPasswordControl = formGroup.get('confirmPassword'); // to get value in input tag\n\n            if (passwordControl && confirmPasswordControl) {\n                const password = passwordControl.value;\n                const confirmPassword = confirmPasswordControl.value;\n                if (password !== confirmPassword) {\n                    return { notMatchPassword: true };\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    static isChecked(control) {\n        if (!control.value) {\n            return { mustChecked: true };\n        } else {\n            return null;\n        }\n    }\n\n    static numberOfBondValidator(AC: AbstractControl) {\n        const formGroup = AC.parent;\n        //if (formGroup) {\n        const numberOfBondControl = formGroup.get('number_of_bond');\n        const totalAvailableBond = formGroup.get('total_available_bond');\n        if (totalAvailableBond.value == 0) {\n            return Observable\n                .of(numberOfBondControl.value == '' || numberOfBondControl.value == 0 || numberOfBondControl.value < 0)\n                .map(result => !!result ? { 'notAvailableToSold': true } : null);\n        }\n\n        if (numberOfBondControl.value == '' || numberOfBondControl.value == 0 || numberOfBondControl.value < 0) {\n            return Observable\n                .of(numberOfBondControl.value == '' || numberOfBondControl.value == 0 || numberOfBondControl.value < 0)\n                .map(result => !!result ? { 'notLessThanOrEqualtoZeroValue': true } : null);\n        }\n\n        return Observable\n            .of(totalAvailableBond.value >= numberOfBondControl.value)\n            .map(result => !!result ? null : { 'notValidBondValue': true });\n        //}\n\n        //return null;\n    }\n\n    static pledgeAmountValidator(AC: AbstractControl) {\n        const formGroup = AC.parent;\n        const amountControl = formGroup.get('amount');\n        const requiredAmountControl = formGroup.get('required_amount');\n        if (requiredAmountControl.value == 0) {\n            return Observable\n                .of(requiredAmountControl.value == '' || requiredAmountControl.value == 0 || requiredAmountControl.value < 0)\n                .map(result => !!result ? { 'notAvailableToSold': true } : null);\n        }\n\n        if (amountControl.value == '' || amountControl.value == 0 || amountControl.value < 0) {\n            return Observable\n                .of(amountControl.value == '' || amountControl.value == 0 || amountControl.value < 0)\n                .map(result => !!result ? { 'notLessThanOrEqualtoZeroValue': true } : null);\n        }\n\n        return Observable\n            .of(requiredAmountControl.value >= amountControl.value)\n            .map(result => !!result ? null : { 'amountLessThanRequiredAmount': true });\n    }\n\n    static dateValidator(control) {\n        if (control.pristine) {\n            return null;\n        }\n\n        if ((control.value !== undefined && control.value !== '' && control.value != null)) {\n\n            var month = null;\n            var day = null;\n            var year = null;\n            var currentTaxYear = Number(new Date().getFullYear() - 1);\n            if (control.value.indexOf('/') > -1) {\n                var res = control.value.split(\"/\");\n                if (res.length > 1) {\n                    month = res[0];\n                    day = res[1]\n                    year = res[2];\n                }\n            }\n            else {\n                if (control.value.length == 8) {\n                    month = control.value.substring(0, 2);\n                    day = control.value.substring(2, 4);\n                    year = control.value.substring(4, 8);\n                }\n            }\n            if (isNaN(month) || isNaN(day) || isNaN(year)) {\n                return { 'dateInvalid': true };\n            }\n            month = Number(month);\n            day = Number(day);\n            year = Number(year);\n            if (month < 1 || month > 12) { // check month range\n                return { 'dateInvalid': true };\n            }\n            if (day < 1 || day > 31) {\n                return { 'dateInvalid': true };\n            }\n            if ((month === 4 || month === 6 || month === 9 || month === 11) && day === 31) {\n                return { 'dateInvalid': true };\n            }\n            if (month == 2) { // check for february 29th\n                var isleap = (year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0));\n                if (day > 29 || (day === 29 && !isleap)) {\n                    return { 'dateInvalid': true };\n                }\n            }\n            if (year !== currentTaxYear) {\n                return { 'dateInvalid': true };\n            }\n        }\n        return null;\n    }\n\n    static isRequiredIfChecked(AC: AbstractControl) {\n        const formGroup = AC.parent;\n        if (formGroup) {\n            const is_open_end = formGroup.get('is_open_end');\n            const expire_by_month = formGroup.get('expire_by_month');\n\n            if (is_open_end.value === true) {\n                console.log(\"insode if block\");\n                return null;\n            } else {\n                console.log(\"insode else block\");\n                if (expire_by_month.value == 0 || expire_by_month.value == '')\n                    return { required: true };\n                else\n                    return null;\n            }\n        }\n    }\n\n    static endDateAfterOrEqualValidator(AC: AbstractControl) {\n        const formGroup = AC.parent;\n        if (formGroup) {\n\n            let start_date = new Date(formGroup.get('start_date').value);\n            let end_date = new Date(formGroup.get('end_date').value);\n\n            if (end_date.getTime() < start_date.getTime()) {\n                return { 'endDateLessThanStartDate': true };\n            } else {\n                return null;\n            }\n        }\n    }\n\n    static mobileNumberValidator(control){\n        return Observable\n            .of(control.value.match('^[0-9]*$'))\n            .map(result => !!result ? null : { 'invalidMobileNumber': true });\n    }\n}\n"],"sourceRoot":""}